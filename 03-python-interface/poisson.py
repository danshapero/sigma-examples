
from sigma_wrapper import *
import matplotlib.pyplot as plt
import numpy as np

# ------------------------------------------------------------------------ #
def read_mesh(filename):                                                   #
# ------------------------------------------------------------------------ #
    """
    Read in a mesh generated by the program Triangle

    Parameters:
    ==========
    filename: the stem of the mesh file, e.g. if the mesh files are
              mesh.1.node, mesh.1.ele, etc then filename = "mesh.1"

    Returns:
    =======
    x, y: the coordinates of the mesh points
    boundary: the boundary marker of each node
    edges: list of all edges of the triangulation
    triangles: list of all triangles
    """

    # Read in the nodes of the triangulation
    fid = open(filename + ".node", "r")
    num_nodes, _, _, _ = map(int, fid.readline().split())

    x = np.zeros(num_nodes, dtype=np.float64)
    y = np.zeros(num_nodes, dtype=np.float64)
    boundary = np.zeros(num_nodes, dtype = np.int32)

    for i in range(num_nodes):
        line = fid.readline().split()
        x[i] = float(line[1])
        y[i] = float(line[2])
        boundary[i] = int(line[3])

    fid.close()

    # Read in the edges
    fid = open(filename + ".edge", "r")
    num_edges, _ = map(int, fid.readline().split())

    edges = np.zeros((num_edges,2), dtype=np.int32)
    edge_boundary = np.zeros(num_edges, dtype=np.int32)
    for i in range(num_edges):
        line = fid.readline().split()[1:]
        edges[i, 0] = int(line[0])
        edges[i, 1] = int(line[1])
        edge_boundary[i] = int(line[2])

    fid.close()

    # Read in the triangles
    fid = open(filename + ".ele", "r")
    num_triangles, _, _ = map(int, fid.readline().split())

    triangles = np.zeros((num_triangles,3), dtype=np.int32)
    for i in range(num_triangles):
        line = fid.readline().split()[1:]
        triangles[i, 0] = int(line[0])
        triangles[i, 1] = int(line[1])
        triangles[i, 2] = int(line[2])

    fid.close()

    return x, y, boundary, edges, triangles


# ------------------------------------------------------------------------ #
if __name__ == "__main__":                                                 #
# ------------------------------------------------------------------------ #
    x, y, boundary, edges, triangles = read_mesh("meshes/example.2")

    nn = len(x)
    f = np.zeros(nn)
    for i in range(nn):
        f[i] = 1.0

    u = poisson_solve(x, y, boundary, edges, triangles, f)

    plt.figure()
    plt.gca().set_aspect('equal')
    plt.tricontourf(x, y, triangles - 1, u, 36, shading = 'faceted')
    plt.colorbar()
    plt.show()

