
import numpy as np
cimport numpy as np


cdef extern from "thingy.h":
    void make_a_thing(int num_nodes, double *x, double *y, double *u)

np.import_array()

# ---------------------------------------------------------------------------- #
def read_mesh(char *filename):                                                 #
# ---------------------------------------------------------------------------- #
    '''
    Read in a mesh generated by the program Triangle

    Parameters:
    ==========
    filename: the stem of the mesh file, e.g. if the mesh files are
              mesh.1.node, mesh.1.ele, ... then the correct filename
              is "mesh.1".

    Returns:
    =======
    x, y: the coordinates of the mesh points
    boundary: the boundary marker of each node
    edges: list of all edges of the triangulation
    triangles: list of all triangles
    '''
    cdef int num_nodes = 0
    cdef int num_edges = 0
    cdef int num_triangles = 0
    cdef int i = 0
    cdef int _ = 0

    # Read in the nodes of the triangulation
    fid = open(filename + ".node", "r")
    num_nodes, _, _, _ = map(int, fid.readline().split())

    cdef np.ndarray[np.float64_t, ndim=1] x = np.empty(num_nodes,
                                                        dtype=np.float64)
    cdef np.ndarray[np.float64_t, ndim=1] y = np.empty(num_nodes, 
                                                        dtype=np.float64)
    cdef np.ndarray[np.int32_t, ndim=1] boundary = np.zeros(num_nodes, 
                                                        dtype=np.int32)

    for i in range(num_nodes):
        line = fid.readline().split()
        x[i], y[i] = map(np.float64, line[1:3])
        boundary[i] = int(line[3])

    fid.close()

    # Read in the edges
    fid = open(filename + ".edge", "r")
    num_edges, _ = map(int, fid.readline().split())

    cdef np.ndarray[np.int32_t, ndim=2] edges = np.zeros((num_edges, 2),
                                                        dtype=np.int32)
    cdef np.ndarray[np.int32_t, ndim=1] edge_boundary = np.zeros(num_edges, 
                                                        dtype=np.int32)

    for i in range(num_edges):
        edges[i, 0], edges[i, 1], edge_boundary[i] = map(np.int32,
                                                    fid.readline().split()[1:])
    
    fid.close()

    # Read in the triangles
    fid = open(filename + ".ele", "r")
    num_triangles, _, _ = map(int, fid.readline().split())

    cdef np.ndarray[np.int32_t, ndim=2] triangles = np.zeros((num_triangles, 3),
                                                        dtype=np.int32)

    for i in range(num_triangles):
        triangles[i, :] = map(np.int32, fid.readline().split()[1:])

    fid.close()

    # Call a C function
    cdef np.ndarray[np.float64_t, ndim=1] u = np.empty(num_nodes,
                                                        dtype=np.float64)

    make_a_thing(num_nodes, &x[0], &y[0], &u[0])

    return x, y, boundary, edges, triangles, u


