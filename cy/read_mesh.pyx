
import numpy as np
cimport numpy as np


cdef extern from "thingy.h":
    void make_a_thing(int num_nodes, double *x, double *y, double *u)

np.import_array()

# ---------------------------------------------------------------------------- #
def read_mesh(filename):                                                       #
# ---------------------------------------------------------------------------- #
    '''
    Read in a mesh generated by the program Triangle

    Parameters:
    ==========
    filename: the stem of the mesh file, e.g. if the mesh files are
              mesh.1.node, mesh.1.ele, ... then the correct filename
              is "mesh.1".

    Returns:
    =======
    x, y: the coordinates of the mesh points
    boundary: the boundary marker of each node
    edges: list of all edges of the triangulation
    triangles: list of all triangles
    '''
    cdef int num_nodes = 0
    cdef int num_edges = 0
    cdef int num_triangles = 0
    cdef int i = 0
    cdef int _ = 0

    # Read in the nodes of the triangulation
    fid = open(filename + ".node", "r")
    num_nodes, _, _, _ = map(int, fid.readline().split())

    cdef double[:] x = np.zeros(num_nodes, dtype=np.double)
    cdef double[:] y = np.zeros(num_nodes, dtype=np.double)
    cdef int[:] boundary = np.zeros(num_nodes, dtype=np.int)
    for i in range(num_nodes):
        line = fid.readline().split()
        x[i] = float(line[1])
        y[i] = float(line[2])
        boundary[i] = int(line[3])

    fid.close()

    # Read in the edges
    fid = open(filename + ".edge", "r")
    num_edges, _ = map(int, fid.readline().split())

    cdef int[:,:] edges = np.zeros((num_edges,2), dtype=np.int)
    cdef int[:] edge_boundary = np.zeros(num_edges, dtype=np.int)
    for i in range(num_edges):
        line = fid.readline().split()[1:]
        edges[i, 0] = int(line[0])
        edges[i, 1] = int(line[1])
        edge_boundary[i] = int(line[2])

    fid.close()

    # Read in the triangles
    fid = open(filename + ".ele", "r")
    num_triangles, _, _ = map(int, fid.readline().split())

    cdef int[:,:] triangles = np.zeros((num_triangles,3), dtype=np.int)
    for i in range(num_triangles):
        line = fid.readline().split()[1:]
        triangles[i, 0] = int(line[0])
        triangles[i, 1] = int(line[1])
        triangles[i, 2] = int(line[2])

    fid.close()

    # Call a C function
    cdef double[:] u = np.zeros(num_nodes, dtype=np.double)
    make_a_thing(num_nodes, &x[0], &y[0], &u[0])

    X = np.asarray(x)
    Y = np.asarray(y)
    U = np.asarray(u)
    Boundary = np.asarray(boundary)
    Edges = np.asarray(edges)
    Triangles = np.asarray(triangles)

    return X, Y, Boundary, Edges, Triangles, U


